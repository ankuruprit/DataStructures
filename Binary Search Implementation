# Binary Search Tree Implementation

class BstNode:
    def __init__(self, data=None):
        self.data = data
        self.left = None
        self.right = None

class BstTree:

    # To insert data in BST
    def insert(self, root, node):
        if root is None:
            root = node
        else:
            if root.data > node.data:
                if root.left is None:
                    root.left = node
                else:
                    self.insert(root.left, node)
            else:
                if root.right is None:
                    root.right = node
                else:
                    self.insert(root.right, node)

    # To search an element in BST, returns True if Element is found
    def search(self, root, data):
        if root is None:
            return False
        elif root.data == data:
            return True
        elif data <= root.data:
            return self.search(root.left, data)
        else:
            return self.search(root.right, data)

    # Find the minimum element in the BST
    def findmin(self, root):
        if root is None:
            print("Tree is empty")
        else:
            while root.left is not None:
                root = root.left
            print('Smallest Element is {}'.format(root.data))

    # Find the maximum element in BST
    def findmax(self, root):
        if root is None:
            print("Tree is empty")
        else:
            while root.right is not None:
                root = root.right
            print('Highest Element is {}'.format(root.data))

    # def find height of BST
    def findheight(self, root):
        if root is None:
            return -1
        else:
            leftheight = self.findheight(root.left)
            rightheight = self.findheight(root.right)

            height = max(leftheight, rightheight) + 1
            return height


if __name__ == '__main__':
    r = BstNode(15)
    curr = BstTree()

    curr.insert(r, BstNode(10))
    curr.insert(r, BstNode(20))
    curr.insert(r, BstNode(25))
    curr.insert(r, BstNode(8))
    curr.insert(r, BstNode(12))
    curr.insert(r, BstNode(14))

    if curr.search(r, 50):
        print("Number Found")
    else:
        print("Number Not Found")

    curr.findmin(r)
    curr.findmax(r)
    print(curr.findheight(r))
